# Solar power rover

import numpy as np
import matplotlib.pyplot as plt

class solar_power():
    def __init__(self):
        self.SUN = [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, \
              0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, \
              0,   0,   0,   9,  24,  53, 103, 128, 163, 170, 193, 252, \
            302, 286, 355, 426, 444, 523, 528, 534, 541, 486, 518, 538, \
            461, 464, 499, 431, 454, 539, 455, 518, 502, 453, 433, 351, \
            384, 317, 276, 263, 122, 116,  77,  70,  43,  38,   6,   0, \
              0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, \
              0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]
        self.TIME = 15*60 # Time interval for the sun
        self.EFF = 0.15 # Efficiency of the solar panels
        self.ERG = 4130 # Energy used per charge
        self.INIT = 0.5 # Ratio of how full the battery starts...

        self.COLLECT = [] # Energy in J/m^2
        for i in self.SUN:
            self.COLLECT += [i * self.EFF * self.TIME]

        self.ans = []

    def total_daily_sun(self):
        total_daily_sun = self.TIME * sum(self.SUN)
        print("The total energy the sun emits per day [J/m^2/day] =", total_daily_sun)

        erg_area = self.EFF * total_daily_sun
        print("The total energy collected per day[J/m^2/day] =", erg_area)

        return True

    def find_dimensions(self):
        N = 1000 # Number of steps
        k = 0.1 # Upper interval
        
        for i in range(0,N,1): # Check areas (0,N)
            area = i*k/N

            if i == 0:
                if area == 0:
                    capacity = 1486800
                else:
                    capacity = 55060  # Minimum capacity: floor(3.3*(4*4130), -1)

                while self.check_dimensions(area, capacity) == False:
                    capacity += 10

                    if capacity > 1734600: # = 10/3 * 7 * 18 * 4130
                        print('ERROR: Exceeded bounds')
                        break
            else:
                capacity = ans[1] # Take previous capacity

                while self.check_dimensions(area, capacity) == True:
                    capacity -= 10

                    if capacity < 55060:
                        print('ERROR: Something actually went wrong!')
                        break

                capacity += 10 # Add 10 back to capacity, to make it work again   

            ans = [area, capacity]
            print('Area and Capacity:', ans)
            
            self.ans += [ans]
            
        return True

    def check_dimensions(self, area, capacity):
        battery = self.INIT * capacity

        collect = [] # Function of how much sun it gets (in J)
        for i in self.COLLECT:
            collect += [area * i]

        for day in range(0,6,1):
            for t in range(0,len(collect),1):
                if t % 8 == 0 or (t%4==0 and t>23 and t<75):
                    battery -= self.ERG # Use battery

                    if battery < 0.2 * capacity: # Check if battery is out of charge
                        return False
                    
                battery += collect[t]
                if battery > capacity:
                    battery = capacity
        return True
        

    def optimal_dimensions_curve(self):
        print("Answer:", self.ans)

        area = []
        capacity = []
        for i in range(0,len(self.ans),1):
            area += [self.ans[i][0]]
            capacity += [self.ans[i][1]]

        plt.plot(area,capacity, label='Minimum Battery size for Given Area')
        plt.xlabel('Area [m^2]')
        plt.ylabel('Size of Battery [J]')
        plt.title('Optimal Battery-size-to-Area Curve')
        plt.legend()
        plt.show()
        
        return True

    def find_optimal_dimensions_wrong(self):
        """
        Wrong. It selects the very small values at the beginning. You have to find the greatest 2nd derivative instead.
        """

        min_product_index = 0
        min_product = self.ans[0][0]*self.ans[0][1]

        for i in range(0,len(self.ans),1):
            if self.ans[i][0]*self.ans[i][1] < min_product or min_product == 0:
                min_product = self.ans[i][0]*self.ans[i][1]
                min_product_index = i

                print(i, ":", self.ans[min_product_index])

        return self.ans[min_product_index]

    def simulate_dimensions(self, area, capacity, num_days=1):
        sim_battery = []
        sim_collect = []
        
        battery = self.INIT * capacity
        
        collect = [] # Function of how much sun it gets
        for i in self.COLLECT:
            collect += [area * i]

        print(area)
        print(self.COLLECT, sum(self.COLLECT))
        print(collect, sum(collect))

        for day in range(0, num_days, 1):
            
            for t in range(0,len(collect),1):

                sim_battery += [battery]
                sim_collect += [self.TIME * area * collect[t]]

                
                if t % 8 == 0 or (t%4==0 and t>23 and t<75):
                    battery -= self.ERG # Use battery

                    if battery < 0.2 * capacity: # Check if battery is out of charge
                        return False
                    
                battery += collect[t]
                if battery > capacity:
                    battery = capacity

        # Plotting it out
        time = []
        title = str(num_days) + ' Day Simulation of '+str(area)+ ' m^2 Solar Panel \n and \n '+str(round(capacity/3600,2))+' W-h battery'
        for i in range(0,num_days*len(collect),1):
            time += [i*0.25]

        plt.plot(time,sim_battery, label='Battery Charge')
        plt.plot(time, sim_collect, label='Sunlight collected')
        plt.xlabel('Time [h]')
        plt.ylabel('Energy [J]')
        plt.title(title)
        plt.legend()
        plt.show()

        return True

    def sim_stored_2020_04_05(self):
        """
        Store value from simulation on April 5th.
        """
        L = [[0.0, 1486800], [0.0001, 1483070], [0.0002, 1479330], [0.00030000000000000003, 1475590], [0.0004, 1471850], [0.0005, 1468110], [0.0006000000000000001, 1464370], [0.0007000000000000001, 1460630], [0.0008, 1456890], [0.0009, 1453150], [0.001, 1449420], [0.0011, 1445680], [0.0012000000000000001, 1441940], [0.0013, 1438200], [0.0014000000000000002, 1434460], [0.0015, 1430720], [0.0016, 1426980], [0.0017000000000000001, 1423240], [0.0018, 1419500], [0.0019000000000000002, 1415760], [0.002, 1412030], [0.0021000000000000003, 1408290], [0.0022, 1404550], [0.0023000000000000004, 1400810], [0.0024000000000000002, 1397070], [0.0025, 1393330], [0.0026, 1389590], [0.0027, 1385850], [0.0028000000000000004, 1382110], [0.0029000000000000002, 1378380], [0.003, 1374640], [0.0031, 1370900], [0.0032, 1367160], [0.0033000000000000004, 1363420], [0.0034000000000000002, 1359680], [0.0035, 1355940], [0.0036, 1352200], [0.0037, 1348460], [0.0038000000000000004, 1344720], [0.0039000000000000003, 1340990], [0.004, 1337250], [0.0041, 1333510], [0.004200000000000001, 1329770], [0.0043, 1326030], [0.0044, 1322290], [0.0045, 1318550], [0.004600000000000001, 1314810], [0.0047, 1311070], [0.0048000000000000004, 1307330], [0.004900000000000001, 1303600], [0.005, 1299860], [0.0051, 1296120], [0.0052, 1292380], [0.005300000000000001, 1288640], [0.0054, 1284900], [0.0055, 1281160], [0.005600000000000001, 1277420], [0.0057, 1273680], [0.0058000000000000005, 1269950], [0.005900000000000001, 1266210], [0.006, 1262470], [0.0061, 1258730], [0.0062, 1254990], [0.006300000000000001, 1251250], [0.0064, 1247510], [0.0065, 1243770], [0.006600000000000001, 1240030], [0.0067, 1236290], [0.0068000000000000005, 1232560], [0.006900000000000001, 1228820], [0.007, 1225080], [0.0071, 1221340], [0.0072, 1217600], [0.007300000000000001, 1213860], [0.0074, 1210120], [0.0075, 1206380], [0.007600000000000001, 1202640], [0.0077, 1198910], [0.0078000000000000005, 1195170], [0.0079, 1191430], [0.008, 1187690], [0.0081, 1183950], [0.0082, 1180210], [0.0083, 1176470], [0.008400000000000001, 1172730], [0.0085, 1168990], [0.0086, 1165250], [0.008700000000000001, 1161520], [0.0088, 1157780], [0.0089, 1154040], [0.009, 1150300], [0.0091, 1146560], [0.009200000000000002, 1142820], [0.009300000000000001, 1139080], [0.0094, 1135340], [0.0095, 1131600], [0.009600000000000001, 1127860], [0.0097, 1124130], [0.009800000000000001, 1120390], [0.0099, 1116650], [0.01, 1112910], [0.010100000000000001, 1109170], [0.0102, 1105430], [0.0103, 1101690], [0.0104, 1097950], [0.0105, 1094210], [0.010600000000000002, 1090480], [0.010700000000000001, 1086740], [0.0108, 1083000], [0.0109, 1079260], [0.011, 1075520], [0.011100000000000002, 1071780], [0.011200000000000002, 1068040], [0.011300000000000001, 1064300], [0.0114, 1060560], [0.0115, 1056820], [0.011600000000000001, 1053090], [0.0117, 1049350], [0.011800000000000001, 1045610], [0.0119, 1041870], [0.012, 1038130], [0.012100000000000001, 1034390], [0.0122, 1030650], [0.0123, 1026910], [0.0124, 1023170], [0.0125, 1019430], [0.012600000000000002, 1015700], [0.012700000000000001, 1011960], [0.0128, 1008220], [0.0129, 1004480], [0.013, 1000740], [0.013100000000000002, 997000], [0.013200000000000002, 993260], [0.013300000000000001, 989520], [0.0134, 985780], [0.0135, 982050], [0.013600000000000001, 978310], [0.0137, 974570], [0.013800000000000002, 970830], [0.013900000000000001, 967090], [0.014, 963350], [0.014100000000000001, 959610], [0.0142, 955870], [0.0143, 952130], [0.0144, 948390], [0.0145, 944660], [0.014600000000000002, 940920], [0.014700000000000001, 937180], [0.0148, 933440], [0.0149, 929700], [0.015, 925960], [0.0151, 922220], [0.015200000000000002, 918480], [0.015300000000000001, 914740], [0.0154, 911010], [0.0155, 907270], [0.015600000000000001, 903530], [0.015700000000000002, 899790], [0.0158, 896050], [0.0159, 892310], [0.016, 888570], [0.0161, 884830], [0.0162, 881090], [0.016300000000000002, 877350], [0.0164, 873620], [0.0165, 869880], [0.0166, 866140], [0.0167, 862400], [0.016800000000000002, 858660], [0.016900000000000002, 854920], [0.017, 851180], [0.0171, 847440], [0.0172, 843700], [0.0173, 839960], [0.017400000000000002, 836230], [0.0175, 832490], [0.0176, 828750], [0.0177, 825010], [0.0178, 821270], [0.017900000000000003, 817530], [0.018, 813790], [0.0181, 810050], [0.0182, 806310], [0.0183, 802580], [0.018400000000000003, 798840], [0.0185, 795100], [0.018600000000000002, 791360], [0.018699999999999998, 787620], [0.0188, 783880], [0.018900000000000004, 780140], [0.019, 776400], [0.019100000000000002, 772660], [0.019200000000000002, 768920], [0.0193, 765190], [0.0194, 761450], [0.0195, 757710], [0.019600000000000003, 753970], [0.019700000000000002, 750230], [0.0198, 746490], [0.0199, 742750], [0.02, 739010], [0.0201, 735270], [0.020200000000000003, 731540], [0.020300000000000002, 727800], [0.0204, 724060], [0.0205, 720320], [0.0206, 716580], [0.020700000000000003, 712840], [0.0208, 709100], [0.020900000000000002, 705360], [0.021, 701620], [0.0211, 697880], [0.021200000000000004, 694150], [0.0213, 690410], [0.021400000000000002, 686670], [0.0215, 682930], [0.0216, 679190], [0.021700000000000004, 675450], [0.0218, 671710], [0.021900000000000003, 667970], [0.022, 664230], [0.0221, 660490], [0.022200000000000004, 656760], [0.0223, 653020], [0.022400000000000003, 649280], [0.0225, 645540], [0.022600000000000002, 641800], [0.0227, 638060], [0.0228, 634320], [0.022900000000000004, 630580], [0.023, 626840], [0.023100000000000002, 623110], [0.023200000000000002, 619370], [0.0233, 615630], [0.0234, 611890], [0.0235, 608150], [0.023600000000000003, 604410], [0.023700000000000002, 600670], [0.0238, 596930], [0.0239, 593190], [0.024, 589450], [0.0241, 585720], [0.024200000000000003, 581980], [0.024300000000000002, 578240], [0.0244, 574500], [0.0245, 570760], [0.0246, 567020], [0.024700000000000003, 563280], [0.0248, 559540], [0.024900000000000002, 555800], [0.025, 552060], [0.0251, 548330], [0.025200000000000004, 544590], [0.0253, 540850], [0.025400000000000002, 537110], [0.0255, 533370], [0.0256, 529630], [0.025700000000000004, 525890], [0.0258, 522150], [0.025900000000000003, 518410], [0.026, 514680], [0.0261, 510940], [0.026200000000000005, 507200], [0.0263, 503460], [0.026400000000000003, 499790], [0.0265, 496630], [0.026600000000000002, 493460], [0.0267, 490300], [0.0268, 487130], [0.026900000000000004, 483970], [0.027, 480800], [0.027100000000000003, 477640], [0.027200000000000002, 474470], [0.0273, 471310], [0.0274, 468140], [0.0275, 464980], [0.027600000000000003, 461810], [0.027700000000000002, 458650], [0.027800000000000002, 455480], [0.0279, 452320], [0.028, 449150], [0.0281, 445990], [0.028200000000000003, 442820], [0.028300000000000002, 439660], [0.0284, 436490], [0.0285, 433330], [0.0286, 430160], [0.028700000000000003, 427000], [0.0288, 423830], [0.028900000000000002, 420660], [0.029, 417500], [0.0291, 414330], [0.029200000000000004, 411170], [0.0293, 408000], [0.029400000000000003, 404840], [0.0295, 401670], [0.0296, 398510], [0.029700000000000004, 395340], [0.0298, 392180], [0.029900000000000003, 389010], [0.03, 385850], [0.030100000000000002, 382680], [0.0302, 379520], [0.0303, 376350], [0.030400000000000003, 373190], [0.0305, 370020], [0.030600000000000002, 366860], [0.0307, 363690], [0.0308, 360530], [0.030900000000000004, 357360], [0.031, 354200], [0.031100000000000003, 351030], [0.031200000000000002, 347870], [0.0313, 344700], [0.031400000000000004, 341540], [0.0315, 338370], [0.0316, 335210], [0.031700000000000006, 332040], [0.0318, 328880], [0.031900000000000005, 325710], [0.032, 322550], [0.032100000000000004, 319380], [0.0322, 316220], [0.0323, 313050], [0.0324, 309890], [0.0325, 306720], [0.032600000000000004, 303560], [0.0327, 300390], [0.0328, 297230], [0.0329, 294060], [0.033, 290900], [0.033100000000000004, 287730], [0.0332, 284570], [0.0333, 281400], [0.0334, 278240], [0.0335, 275070], [0.033600000000000005, 271910], [0.0337, 268740], [0.033800000000000004, 265580], [0.0339, 262410], [0.034, 259250], [0.0341, 256080], [0.0342, 252920], [0.034300000000000004, 249750], [0.0344, 246590], [0.0345, 243420], [0.0346, 240260], [0.0347, 237090], [0.034800000000000005, 233930], [0.0349, 230760], [0.035, 227600], [0.0351, 224430], [0.0352, 221270], [0.035300000000000005, 218100], [0.0354, 214940], [0.0355, 211770], [0.0356, 208600], [0.0357, 205440], [0.035800000000000005, 202270], [0.0359, 199110], [0.036, 195940], [0.0361, 192780], [0.0362, 189610], [0.036300000000000006, 186450], [0.0364, 183280], [0.0365, 180120], [0.0366, 176950], [0.0367, 173790], [0.036800000000000006, 170620], [0.036899999999999995, 167460], [0.037, 164290], [0.0371, 161130], [0.037200000000000004, 157960], [0.03730000000000001, 154800], [0.037399999999999996, 151630], [0.0375, 148470], [0.0376, 145300], [0.037700000000000004, 142140], [0.03780000000000001, 138970], [0.037899999999999996, 135810], [0.038, 132640], [0.0381, 129480], [0.038200000000000005, 126310], [0.03830000000000001, 123150], [0.038400000000000004, 119980], [0.0385, 116820], [0.0386, 113650], [0.038700000000000005, 110490], [0.0388, 107320], [0.038900000000000004, 104160], [0.039, 100990], [0.0391, 97830], [0.039200000000000006, 94660], [0.0393, 91500], [0.039400000000000004, 88360], [0.0395, 85230], [0.0396, 82100], [0.039700000000000006, 78970], [0.0398, 76930], [0.039900000000000005, 76910], [0.04, 76900], [0.040100000000000004, 76880], [0.0402, 76870], [0.0403, 76860], [0.040400000000000005, 76840], [0.0405, 76830], [0.040600000000000004, 76810], [0.0407, 76800], [0.0408, 76780], [0.040900000000000006, 76770], [0.041, 76760], [0.041100000000000005, 76740], [0.0412, 76730], [0.0413, 76710], [0.041400000000000006, 76700], [0.0415, 76690], [0.0416, 76670], [0.0417, 76660], [0.041800000000000004, 76640], [0.04190000000000001, 76630], [0.042, 76610], [0.0421, 76600], [0.0422, 76590], [0.042300000000000004, 76570], [0.04240000000000001, 76560], [0.0425, 76540], [0.0426, 76530], [0.0427, 76510], [0.042800000000000005, 76500], [0.04290000000000001, 76490], [0.043, 76470], [0.0431, 76460], [0.0432, 76440], [0.043300000000000005, 76430], [0.04340000000000001, 76410], [0.0435, 76400], [0.0436, 76390], [0.0437, 76370], [0.043800000000000006, 76360], [0.04390000000000001, 76340], [0.044, 76330], [0.0441, 76310], [0.0442, 76300], [0.044300000000000006, 76290], [0.04440000000000001, 76270], [0.0445, 76260], [0.0446, 76240], [0.044700000000000004, 76230], [0.044800000000000006, 76210], [0.0449, 76200], [0.045, 76190], [0.0451, 76170], [0.045200000000000004, 76160], [0.04530000000000001, 76140], [0.0454, 76130], [0.0455, 76110], [0.0456, 76100], [0.045700000000000005, 76090], [0.04580000000000001, 76070], [0.0459, 76060], [0.046, 76040], [0.0461, 76030], [0.046200000000000005, 76010], [0.0463, 76000], [0.046400000000000004, 75990], [0.0465, 75970], [0.0466, 75960], [0.046700000000000005, 75940], [0.0468, 75930], [0.046900000000000004, 75910], [0.047, 75900], [0.0471, 75890], [0.047200000000000006, 75870], [0.0473, 75860], [0.047400000000000005, 75840], [0.0475, 75830], [0.0476, 75810], [0.047700000000000006, 75800], [0.0478, 75790], [0.047900000000000005, 75770], [0.048, 75760], [0.048100000000000004, 75740], [0.0482, 75730], [0.0483, 75720], [0.048400000000000006, 75700], [0.0485, 75690], [0.048600000000000004, 75670], [0.0487, 75660], [0.0488, 75640], [0.048900000000000006, 75630], [0.049, 75620], [0.049100000000000005, 75600], [0.0492, 75590], [0.049300000000000004, 75570], [0.049400000000000006, 75560], [0.0495, 75540], [0.0496, 75530], [0.0497, 75520], [0.049800000000000004, 75500], [0.04990000000000001, 75490], [0.05, 75470], [0.0501, 75460], [0.0502, 75440], [0.050300000000000004, 75430], [0.05040000000000001, 75420], [0.0505, 75400], [0.0506, 75390], [0.0507, 75370], [0.050800000000000005, 75360], [0.05090000000000001, 75340], [0.051, 75330], [0.0511, 75320], [0.0512, 75300], [0.051300000000000005, 75290], [0.05140000000000001, 75270], [0.0515, 75260], [0.0516, 75240], [0.0517, 75230], [0.051800000000000006, 75220], [0.05190000000000001, 75200], [0.052, 75190], [0.0521, 75170], [0.0522, 75160], [0.052300000000000006, 75140], [0.05240000000000001, 75130], [0.0525, 75120], [0.0526, 75100], [0.052700000000000004, 75090], [0.05280000000000001, 75070], [0.0529, 75060], [0.053, 75040], [0.0531, 75030], [0.053200000000000004, 75020], [0.05330000000000001, 75000], [0.0534, 74990], [0.0535, 74970], [0.0536, 74960], [0.053700000000000005, 74940], [0.05380000000000001, 74930], [0.0539, 74920], [0.054, 74900], [0.0541, 74890], [0.054200000000000005, 74870], [0.0543, 74860], [0.054400000000000004, 74840], [0.0545, 74830], [0.0546, 74820], [0.054700000000000006, 74800], [0.0548, 74790], [0.054900000000000004, 74770], [0.055, 74760], [0.0551, 74740], [0.055200000000000006, 74730], [0.0553, 74720], [0.055400000000000005, 74700], [0.0555, 74690], [0.055600000000000004, 74670], [0.0557, 74660], [0.0558, 74650], [0.055900000000000005, 74630], [0.056, 74620], [0.056100000000000004, 74600], [0.0562, 74590], [0.0563, 74570], [0.056400000000000006, 74560], [0.0565, 74550], [0.056600000000000004, 74530], [0.0567, 74520], [0.0568, 74500], [0.056900000000000006, 74490], [0.057, 74470], [0.0571, 74460], [0.0572, 74450], [0.057300000000000004, 74430], [0.05740000000000001, 74420], [0.0575, 74400], [0.0576, 74390], [0.0577, 74370], [0.057800000000000004, 74360], [0.05790000000000001, 74350], [0.058, 74330], [0.0581, 74320], [0.0582, 74300], [0.058300000000000005, 74290], [0.05840000000000001, 74270], [0.0585, 74260], [0.0586, 74250], [0.0587, 74230], [0.058800000000000005, 74220], [0.05890000000000001, 74200], [0.059, 74190], [0.0591, 74170], [0.0592, 74160], [0.059300000000000005, 74150], [0.05940000000000001, 74130], [0.0595, 74120], [0.0596, 74100], [0.0597, 74090], [0.059800000000000006, 74070], [0.05990000000000001, 74060], [0.06, 74050], [0.0601, 74030], [0.060200000000000004, 74020], [0.060300000000000006, 74000], [0.0604, 73990], [0.0605, 73970], [0.0606, 73960], [0.060700000000000004, 73950], [0.06080000000000001, 73930], [0.0609, 73920], [0.061, 73900], [0.0611, 73890], [0.061200000000000004, 73870], [0.06130000000000001, 73860], [0.0614, 73850], [0.0615, 73830], [0.0616, 73820], [0.061700000000000005, 73800], [0.06180000000000001, 73790], [0.061900000000000004, 73770], [0.062, 73760], [0.0621, 73750], [0.062200000000000005, 73730], [0.0623, 73720], [0.062400000000000004, 73700], [0.0625, 73690], [0.0626, 73680], [0.0627, 73660], [0.06280000000000001, 73650], [0.06290000000000001, 73630], [0.063, 73620], [0.0631, 73600], [0.0632, 73590], [0.06330000000000001, 73580], [0.06340000000000001, 73560], [0.0635, 73550], [0.0636, 73530], [0.0637, 73520], [0.06380000000000001, 73500], [0.06390000000000001, 73490], [0.064, 73480], [0.0641, 73460], [0.06420000000000001, 73450], [0.0643, 73430], [0.0644, 73420], [0.0645, 73400], [0.0646, 73390], [0.06470000000000001, 73380], [0.0648, 73360], [0.0649, 73350], [0.065, 73330], [0.0651, 73320], [0.06520000000000001, 73300], [0.0653, 73290], [0.0654, 73280], [0.0655, 73260], [0.0656, 73250], [0.06570000000000001, 73230], [0.0658, 73220], [0.0659, 73200], [0.066, 73190], [0.0661, 73180], [0.06620000000000001, 73160], [0.0663, 73150], [0.0664, 73130], [0.0665, 73120], [0.0666, 73100], [0.06670000000000001, 73090], [0.0668, 73080], [0.0669, 73060], [0.067, 73050], [0.0671, 73030], [0.06720000000000001, 73020], [0.0673, 73000], [0.0674, 72990], [0.0675, 72980], [0.06760000000000001, 72960], [0.0677, 72950], [0.0678, 72930], [0.0679, 72920], [0.068, 72900], [0.06810000000000001, 72890], [0.0682, 72880], [0.0683, 72860], [0.0684, 72850], [0.0685, 72830], [0.06860000000000001, 72820], [0.0687, 72800], [0.0688, 72790], [0.0689, 72780], [0.069, 72760], [0.06910000000000001, 72750], [0.0692, 72730], [0.0693, 72720], [0.0694, 72710], [0.0695, 72690], [0.06960000000000001, 72680], [0.0697, 72660], [0.0698, 72650], [0.0699, 72630], [0.07, 72620], [0.07010000000000001, 72610], [0.0702, 72590], [0.0703, 72580], [0.0704, 72560], [0.0705, 72550], [0.07060000000000001, 72530], [0.0707, 72520], [0.0708, 72510], [0.0709, 72490], [0.071, 72480], [0.07110000000000001, 72460], [0.0712, 72450], [0.0713, 72430], [0.0714, 72420], [0.0715, 72410], [0.07160000000000001, 72390], [0.0717, 72380], [0.0718, 72360], [0.0719, 72350], [0.072, 72330], [0.07210000000000001, 72320], [0.0722, 72310], [0.0723, 72290], [0.0724, 72280], [0.0725, 72260], [0.07260000000000001, 72250], [0.0727, 72230], [0.0728, 72220], [0.0729, 72210], [0.073, 72190], [0.07310000000000001, 72180], [0.0732, 72160], [0.0733, 72150], [0.0734, 72130], [0.0735, 72120], [0.07360000000000001, 72110], [0.0737, 72090], [0.07379999999999999, 72080], [0.07390000000000001, 72060], [0.074, 72050], [0.07410000000000001, 72030], [0.0742, 72020], [0.07429999999999999, 72010], [0.07440000000000001, 71990], [0.0745, 71980], [0.07460000000000001, 71960], [0.0747, 71950], [0.07479999999999999, 71930], [0.07490000000000001, 71920], [0.075, 71910], [0.07510000000000001, 71890], [0.0752, 71880], [0.07529999999999999, 71860], [0.07540000000000001, 71850], [0.0755, 71830], [0.07560000000000001, 71820], [0.0757, 71810], [0.07579999999999999, 71790], [0.07590000000000001, 71780], [0.076, 71760], [0.07610000000000001, 71750], [0.0762, 71740], [0.07629999999999999, 71720], [0.07640000000000001, 71710], [0.0765, 71690], [0.07660000000000002, 71680], [0.0767, 71660], [0.07680000000000001, 71650], [0.07690000000000001, 71640], [0.077, 71620], [0.0771, 71610], [0.0772, 71590], [0.07730000000000001, 71580], [0.07740000000000001, 71560], [0.0775, 71550], [0.0776, 71540], [0.0777, 71520], [0.07780000000000001, 71510], [0.07790000000000001, 71490], [0.078, 71480], [0.0781, 71460], [0.0782, 71450], [0.07830000000000001, 71440], [0.07840000000000001, 71420], [0.0785, 71410], [0.0786, 71390], [0.0787, 71380], [0.07880000000000001, 71360], [0.07890000000000001, 71350], [0.079, 71340], [0.0791, 71320], [0.0792, 71310], [0.07930000000000001, 71290], [0.07940000000000001, 71280], [0.0795, 71260], [0.0796, 71250], [0.07970000000000001, 71240], [0.07980000000000001, 71220], [0.0799, 71210], [0.08, 71190], [0.0801, 71180], [0.08020000000000001, 71160], [0.08030000000000001, 71150], [0.0804, 71140], [0.0805, 71120], [0.0806, 71110], [0.08070000000000001, 71090], [0.08080000000000001, 71080], [0.0809, 71060], [0.081, 71050], [0.0811, 71040], [0.08120000000000001, 71020], [0.08130000000000001, 71010], [0.0814, 70990], [0.0815, 70980], [0.0816, 70960], [0.08170000000000001, 70950], [0.08180000000000001, 70940], [0.0819, 70920], [0.082, 70910], [0.0821, 70890], [0.08220000000000001, 70880], [0.08230000000000001, 70860], [0.0824, 70850], [0.0825, 70840], [0.0826, 70820], [0.08270000000000001, 70810], [0.08280000000000001, 70790], [0.0829, 70780], [0.083, 70770], [0.08310000000000001, 70750], [0.0832, 70740], [0.08330000000000001, 70720], [0.0834, 70710], [0.0835, 70690], [0.08360000000000001, 70680], [0.0837, 70670], [0.08380000000000001, 70650], [0.0839, 70640], [0.084, 70620], [0.08410000000000001, 70610], [0.0842, 70590], [0.08430000000000001, 70580], [0.0844, 70570], [0.0845, 70550], [0.08460000000000001, 70540], [0.0847, 70520], [0.08480000000000001, 70510], [0.0849, 70490], [0.085, 70480], [0.08510000000000001, 70470], [0.0852, 70450], [0.08530000000000001, 70440], [0.0854, 70420], [0.0855, 70410], [0.08560000000000001, 70390], [0.0857, 70380], [0.08580000000000002, 70370], [0.0859, 70350], [0.086, 70340], [0.08610000000000001, 70320], [0.0862, 70310], [0.08630000000000002, 70290], [0.0864, 70280], [0.0865, 70270], [0.08660000000000001, 70250], [0.0867, 70240], [0.08680000000000002, 70220], [0.0869, 70210], [0.087, 70190], [0.08710000000000001, 70180], [0.0872, 70170], [0.08730000000000002, 70150], [0.0874, 70140], [0.0875, 70120], [0.08760000000000001, 70110], [0.0877, 70090], [0.08780000000000002, 70080], [0.0879, 70070], [0.088, 70050], [0.08810000000000001, 70040], [0.0882, 70020], [0.08830000000000002, 70010], [0.0884, 69990], [0.0885, 69980], [0.08860000000000001, 69970], [0.0887, 69950], [0.08880000000000002, 69940], [0.0889, 69920], [0.089, 69910], [0.08910000000000001, 69890], [0.0892, 69880], [0.08930000000000002, 69870], [0.08940000000000001, 69850], [0.0895, 69840], [0.08960000000000001, 69820], [0.0897, 69810], [0.0898, 69800], [0.08990000000000001, 69780], [0.09, 69770], [0.09010000000000001, 69750], [0.0902, 69740], [0.0903, 69720], [0.09040000000000001, 69710], [0.0905, 69700], [0.09060000000000001, 69680], [0.0907, 69670], [0.0908, 69650], [0.09090000000000001, 69640], [0.091, 69620], [0.09110000000000001, 69610], [0.0912, 69600], [0.0913, 69580], [0.09140000000000001, 69570], [0.0915, 69550], [0.09160000000000001, 69540], [0.0917, 69520], [0.0918, 69510], [0.09190000000000001, 69500], [0.092, 69480], [0.09210000000000002, 69470], [0.0922, 69450], [0.09230000000000001, 69440], [0.09240000000000001, 69420], [0.0925, 69410], [0.0926, 69400], [0.0927, 69380], [0.09280000000000001, 69370], [0.09290000000000001, 69350], [0.093, 69340], [0.0931, 69320], [0.0932, 69310], [0.09330000000000001, 69300], [0.09340000000000001, 69280], [0.0935, 69270], [0.0936, 69250], [0.0937, 69240], [0.09380000000000001, 69220], [0.09390000000000001, 69210], [0.094, 69200], [0.0941, 69180], [0.0942, 69170], [0.09430000000000001, 69150], [0.09440000000000001, 69140], [0.0945, 69120], [0.0946, 69110], [0.0947, 69100], [0.09480000000000001, 69080], [0.09490000000000001, 69070], [0.095, 69050], [0.0951, 69040], [0.0952, 69020], [0.09530000000000001, 69010], [0.09540000000000001, 69000], [0.0955, 68980], [0.0956, 68970], [0.09570000000000001, 68950], [0.09580000000000001, 68940], [0.0959, 68920], [0.096, 68910], [0.0961, 68900], [0.09620000000000001, 68880], [0.09630000000000001, 68870], [0.0964, 68850], [0.0965, 68840], [0.0966, 68830], [0.09670000000000001, 68810], [0.09680000000000001, 68800], [0.0969, 68780], [0.097, 68770], [0.0971, 68750], [0.09720000000000001, 68740], [0.09730000000000001, 68730], [0.0974, 68710], [0.0975, 68700], [0.0976, 68680], [0.09770000000000001, 68670], [0.09780000000000001, 68650], [0.0979, 68640], [0.098, 68630], [0.0981, 68610], [0.09820000000000001, 68600], [0.09830000000000001, 68580], [0.0984, 68570], [0.0985, 68550], [0.09860000000000001, 68540], [0.0987, 68530], [0.09880000000000001, 68510], [0.0989, 68500], [0.099, 68480], [0.09910000000000001, 68470], [0.0992, 68450], [0.09930000000000001, 68440], [0.0994, 68440], [0.0995, 68440], [0.09960000000000001, 68430], [0.0997, 68430], [0.09980000000000001, 68430], [0.0999, 68430]]
        self.ans = L

        return True

def main():
    x = solar_power()

    #x.total_daily_sun()
    
    #x.find_dimensions()
    #x.optimal_dimensions_curve()
    #x.sim_stored_2020_04_05()
    r = x.find_optimal_dimensions_wrong()
    x.simulate_dimensions(0.04,76900,1)
    x.simulate_dimensions(r[0],r[1],7)

main()

# Solar power rover

import math
import numpy as np
import matplotlib.pyplot as plt

class solar_power():
    def __init__(self):

        ## Define constants as specified in assignment
        
        self.SUN = [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, \
              0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, \
              0,   0,   0,   9,  24,  53, 103, 128, 163, 170, 193, 252, \
            302, 286, 355, 426, 444, 523, 528, 534, 541, 486, 518, 538, \
            461, 464, 499, 431, 454, 539, 455, 518, 502, 453, 433, 351, \
            384, 317, 276, 263, 122, 116,  77,  70,  43,  38,   6,   0, \
              0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, \
              0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0] # Solar energy flux as a function of time [W/m^2]

        self.TIME = 15*60 # Time interval for the sun
        self.EFF = 0.1 # Efficiency of the solar panels
        self.INIT = 0.5 # Ratio of how full the battery starts...

        self.MIN = 0.2 # Minimum acceptable charge
        self.DAYS = 7 # Number of days in simulation
        self.PERDAY = 18 # Charge cycles per day

        self.COLLECT = [] # Energy flux collected as a function of time [J/m^2]
        for i in self.SUN:
            self.COLLECT += [i * self.EFF * self.TIME]


        ## Constants that I have previously calculated
        
        self.ERG = 5150 # Energy used per charge
        self.max_cap = int(1 / (self.INIT - self.MIN) * self.DAYS * self.PERDAY * self.ERG) # = 10/3 * 7 * 18 * self.ERG = 2 163 000 for self.ERG==5150
        self.min_cap = int(1/self.INIT * 4 * self.ERG) # 1/0.5 * 4 (initial runs in darkness) * self.ERG

        self.price_Li = 500 /1000 /3600 # [$USD/J] From: $500 USD / kWh
        self.price_solar = 21.85 * 3.28**2 # [$USD/m^2] From $21.85 USD / ft^2

        ## Class-wide variables for later use
        
        # Store function of area to battery size
        self.ans = []




    ##### Energy Generated ######

    def convert(self, value,unitA='J/day/m^2', unitB='J/day/m^2'):
        """
        Convert units of ENERGY FLUX.
        """
        # This would be better to use split at '/'
        
        if unitA == 'J/day/m^2':
            if unitB == 'J/day/m^2':
                return value
            elif unitB == 'kJ/day/m^2':
                return value / 1000
            elif unitB == 'W/m^2':
                return value / 86400
            elif unitB == 'kW/m^2':
                return value / 86400 / 1000
            elif unitB == 'Wh/day/m^2':
                return value / 3600
            elif unitB == 'kWh/day/m^2':
                return value / 3600 / 1000
            else:
                print('ERROR: unsupoorted target unit in solar_power.convert(). Value returned as None.')
                return None
        elif unitA == 'J':
            if unitB == 'J':
                return value
            elif unitB == 'kJ':
                return value / 1000
            elif unitB == 'Wh':
                return value / 3600
            elif unitB == 'kWh':
                return value / 3600 / 1000
        elif unitA == 'Wh':
            if unitB == 'Wh':
                return value
            elif unitB == 'kWh':
                return value / 1000
            elif unitB == 'J':
                return 3600 * value
            elif unitB == 'kJ':
                return 3600 * value / 1000
        else:
            print('ERROR: unsupported input unit in solar_power.convert(). Value returned as None.')
            return None

    def daily_sun(self,show=False):
        """
        Calculate and display the TOTAL SOLAR ENERGY FLUX and the COLLECTED SOLAR ENERGY FLUX.

        Returns COLLECTED SOLAR FLUX in [J/day/m^2]
        """

        # Calculate SOLAR FLUX
        flux  = self.TIME * sum(self.SUN)

        # Calculate COLLECTED SOLAR FLUX
        col  = self.EFF * flux
        
        if show == True:
            # TOTAL SOLAR ENERGY FLUX
            fluxK = self.convert(flux,unitB='kJ/day/m^2')
            fluxA = self.convert(flux,unitB='W/m^2')
            fluxB = self.convert(flux,unitB='kW/m^2')
            fluxC = self.convert(flux,unitB='Wh/day/m^2')
            fluxD = self.convert(flux,unitB='kWh/day/m^2')
            
            print('The total solar energy flux:')
            print('\t\t =', flux,  '\t\t [J/day/m^2]')
            print('\t\t =', fluxK,  '\t\t [kJ/day/m^2]')
            print('\t\t =', fluxA, '\t\t [W/m^2]')
            print('\t\t =', fluxB, '\t\t [kW/m^2]')
            print('\t\t =', fluxC, '\t\t [Wh/day/m^2]')
            print('\t\t =', fluxD, '\t\t [kWh/day/m^2]\n\n')

            # COLLECTED SOLAR ENERGY FLUX
            
            colK = self.EFF * fluxK
            colA = self.EFF * fluxA
            colB = self.EFF * fluxB
            colC = self.EFF * fluxC
            colD = self.EFF * fluxD
            print('The total collected solar energy flux:')
            print('\t\t =', col,  '\t\t [J/day/m^2]')
            print('\t\t =', colK,  '\t\t [kJ/day/m^2]')
            print('\t\t =', colA, '\t\t [W/m^2]')
            print('\t\t =', colB, '\t\t [kW/m^2]')
            print('\t\t =', colC, '\t\t [Wh/day/m^2]')
            print('\t\t =', colD, '\t\t [kWh/day/m^2]\n\n')
        
        return col




    ##### PART I & III: Energy Requirements #####

    def daily_use(self):
        """
        Returns daily energy use in [J/day]
        """
        return self.PERDAY * self.ERG

    def min_area(self, show=False):
        """
        Calculate the minimum area of solar panelling needed to power the robot, neglecting storage capacity limitaions.
        """
        
        # Calculate mininum area
        min_area = self.daily_use() / self.daily_sun(show=False)
        
        if show == True:
            print('One m^2 of solar panelling at', self.EFF, 'efficiency can generate enough energy to power', 1/min_area, 'robots!\n\n')
            
            print('The minimum area of the solar panel (neglecting storage capacity limitations) is:')
            print('\t\t =',min_area, '/t/t [m^2]')
            print('\t\t =',min_area*100*100, '/t/t [cm^2]\n\n')

        return min_area



    ##### PART I & II: Cost of the Solar Panel #####

    def cost(self,area,capacity):
        return round(self.price_solar*area + self.price_Li*capacity,2)




    ##### PART IV: Find dimensions #####

    def sim_stored_2020_04_08(self):
        """
        Store value from simulation on April 8th.
        """
        L = [[0.0, 2163000], [0.001, 2119380], [0.002, 2075760], [0.003, 2032140], [0.004, 1988520], [0.005, 1944900], [0.006, 1901280], [0.007, 1857660], [0.008, 1814040], [0.009, 1770410], [0.01, 1726790], [0.011, 1683170], [0.012, 1639550], [0.013, 1595930], [0.014, 1552310], [0.015, 1508690], [0.016, 1465070], [0.017, 1421440], [0.018, 1377820], [0.019, 1334200], [0.02, 1290580], [0.021, 1246960], [0.022, 1203340], [0.023, 1159720], [0.024, 1116100], [0.025, 1072470], [0.026, 1028850], [0.027, 985230], [0.028, 941610], [0.029, 897990], [0.03, 854370], [0.031, 810750], [0.032, 767130], [0.033, 724050], [0.034, 686170], [0.035, 648290], [0.036, 610410], [0.037, 572520], [0.038, 534640], [0.039, 496760], [0.04, 458880], [0.041, 421000], [0.042, 383110], [0.043, 345230], [0.044, 307350], [0.045, 269470], [0.046, 231580], [0.047, 193700], [0.048, 155820], [0.049, 117940], [0.05, 95870], [0.051, 95730], [0.052, 95590], [0.053, 95440], [0.054, 95300], [0.055, 95160], [0.056, 95020], [0.057, 94870], [0.058, 94730], [0.059, 94590], [0.06, 94450], [0.061, 94300], [0.062, 94160], [0.063, 94020], [0.064, 93880], [0.065, 93730], [0.066, 93590], [0.067, 93450], [0.068, 93300], [0.069, 93160], [0.07, 93020], [0.071, 92880], [0.072, 92730], [0.073, 92590], [0.074, 92450], [0.075, 92310], [0.076, 92160], [0.077, 92020], [0.078, 91880], [0.079, 91740], [0.08, 91590], [0.081, 91450], [0.082, 91310], [0.083, 91170], [0.084, 91020], [0.085, 90880], [0.086, 90740], [0.087, 90590], [0.088, 90450], [0.089, 90310], [0.09, 90170], [0.091, 90020], [0.092, 89880], [0.093, 89740], [0.094, 89600], [0.095, 89450], [0.096, 89310], [0.097, 89170], [0.098, 89030], [0.099, 88880], [0.1, 88740], [0.101, 88600], [0.102, 88450], [0.103, 88310], [0.104, 88170], [0.105, 88030], [0.106, 87880], [0.107, 87740], [0.108, 87600], [0.109, 87460], [0.11, 87310], [0.111, 87170], [0.112, 87030], [0.113, 86890], [0.114, 86740], [0.115, 86600], [0.116, 86460], [0.117, 86310], [0.118, 86170], [0.119, 86030], [0.12, 85890], [0.121, 85740], [0.122, 85600], [0.123, 85460], [0.124, 85340], [0.125, 85330], [0.126, 85330], [0.127, 85320], [0.128, 85320], [0.129, 85320], [0.13, 85310], [0.131, 85310], [0.132, 85300], [0.133, 85300], [0.134, 85300], [0.135, 85290], [0.136, 85290], [0.137, 85280], [0.138, 85280], [0.139, 85280], [0.14, 85270], [0.141, 85270], [0.142, 85260], [0.143, 85260], [0.144, 85260], [0.145, 85250], [0.146, 85250], [0.147, 85240], [0.148, 85240], [0.149, 85230], [0.15, 85230], [0.151, 85230], [0.152, 85220], [0.153, 85220], [0.154, 85210], [0.155, 85210], [0.156, 85210], [0.157, 85200], [0.158, 85200], [0.159, 85190], [0.16, 85190], [0.161, 85190], [0.162, 85180], [0.163, 85180], [0.164, 85170], [0.165, 85170], [0.166, 85170], [0.167, 85160], [0.168, 85160], [0.169, 85150], [0.17, 85150], [0.171, 85150], [0.172, 85140], [0.173, 85140], [0.174, 85130], [0.175, 85130], [0.176, 85130], [0.177, 85120], [0.178, 85120], [0.179, 85110], [0.18, 85110], [0.181, 85110], [0.182, 85100], [0.183, 85100], [0.184, 85090], [0.185, 85090], [0.186, 85090], [0.187, 85080], [0.188, 85080], [0.189, 85070], [0.19, 85070], [0.191, 85060], [0.192, 85060], [0.193, 85060], [0.194, 85050], [0.195, 85050], [0.196, 85040], [0.197, 85040], [0.198, 85040], [0.199, 85030], [0.2, 85030], [0.201, 85020], [0.202, 85020], [0.203, 85020], [0.204, 85010], [0.205, 85010], [0.206, 85000], [0.207, 85000], [0.208, 85000], [0.209, 84990], [0.21, 84990], [0.211, 84980], [0.212, 84980], [0.213, 84980], [0.214, 84970], [0.215, 84970], [0.216, 84960], [0.217, 84960], [0.218, 84960], [0.219, 84950], [0.22, 84950], [0.221, 84940], [0.222, 84940], [0.223, 84940], [0.224, 84930], [0.225, 84930], [0.226, 84920], [0.227, 84920], [0.228, 84910], [0.229, 84910], [0.23, 84910], [0.231, 84900], [0.232, 84900], [0.233, 84890], [0.234, 84890], [0.235, 84890], [0.236, 84880], [0.237, 84880], [0.238, 84870], [0.239, 84870], [0.24, 84870], [0.241, 84860], [0.242, 84860], [0.243, 84850], [0.244, 84850], [0.245, 84850], [0.246, 84840], [0.247, 84840], [0.248, 84830], [0.249, 84830], [0.25, 84830], [0.251, 84820], [0.252, 84820], [0.253, 84810], [0.254, 84810], [0.255, 84810], [0.256, 84800], [0.257, 84800], [0.258, 84790], [0.259, 84790], [0.26, 84790], [0.261, 84780], [0.262, 84780], [0.263, 84770], [0.264, 84770], [0.265, 84770], [0.266, 84760], [0.267, 84760], [0.268, 84750], [0.269, 84750], [0.27, 84740], [0.271, 84740], [0.272, 84740], [0.273, 84730], [0.274, 84730], [0.275, 84720], [0.276, 84720], [0.277, 84720], [0.278, 84710], [0.279, 84710], [0.28, 84700], [0.281, 84700], [0.282, 84700], [0.283, 84690], [0.284, 84690], [0.285, 84680], [0.286, 84680], [0.287, 84680], [0.288, 84670], [0.289, 84670], [0.29, 84660], [0.291, 84660], [0.292, 84660], [0.293, 84650], [0.294, 84650], [0.295, 84640], [0.296, 84640], [0.297, 84640], [0.298, 84630], [0.299, 84630], [0.3, 84620], [0.301, 84620], [0.302, 84620], [0.303, 84610], [0.304, 84610], [0.305, 84600], [0.306, 84600], [0.307, 84590], [0.308, 84590], [0.309, 84590], [0.31, 84580], [0.311, 84580], [0.312, 84570], [0.313, 84570], [0.314, 84570], [0.315, 84560], [0.316, 84560], [0.317, 84550], [0.318, 84550], [0.319, 84550], [0.32, 84540], [0.321, 84540], [0.322, 84530], [0.323, 84530], [0.324, 84530], [0.325, 84520], [0.326, 84520], [0.327, 84510], [0.328, 84510], [0.329, 84510], [0.33, 84500], [0.331, 84500], [0.332, 84490], [0.333, 84490], [0.334, 84490], [0.335, 84480], [0.336, 84480], [0.337, 84470], [0.338, 84470], [0.339, 84470], [0.34, 84460], [0.341, 84460], [0.342, 84450], [0.343, 84450], [0.344, 84450], [0.345, 84440], [0.346, 84440], [0.347, 84430], [0.348, 84430], [0.349, 84420], [0.35, 84420], [0.351, 84420], [0.352, 84410], [0.353, 84410], [0.354, 84400], [0.355, 84400], [0.356, 84400], [0.357, 84390], [0.358, 84390], [0.359, 84380], [0.36, 84380], [0.361, 84380], [0.362, 84370], [0.363, 84370], [0.364, 84360], [0.365, 84360], [0.366, 84360], [0.367, 84350], [0.368, 84350], [0.369, 84340], [0.37, 84340], [0.371, 84340], [0.372, 84330], [0.373, 84330], [0.374, 84320], [0.375, 84320], [0.376, 84320], [0.377, 84310], [0.378, 84310], [0.379, 84300], [0.38, 84300], [0.381, 84300], [0.382, 84290], [0.383, 84290], [0.384, 84280], [0.385, 84280], [0.386, 84280], [0.387, 84270], [0.388, 84270], [0.389, 84260], [0.39, 84260], [0.391, 84250], [0.392, 84250], [0.393, 84250], [0.394, 84240], [0.395, 84240], [0.396, 84230], [0.397, 84230], [0.398, 84230], [0.399, 84220], [0.4, 84220], [0.401, 84210], [0.402, 84210], [0.403, 84210], [0.404, 84200], [0.405, 84200], [0.406, 84190], [0.407, 84190], [0.408, 84190], [0.409, 84180], [0.41, 84180], [0.411, 84170], [0.412, 84170], [0.413, 84170], [0.414, 84160], [0.415, 84160], [0.416, 84150], [0.417, 84150], [0.418, 84150], [0.419, 84140], [0.42, 84140], [0.421, 84130], [0.422, 84130], [0.423, 84130], [0.424, 84120], [0.425, 84120], [0.426, 84110], [0.427, 84110], [0.428, 84100], [0.429, 84100], [0.43, 84100], [0.431, 84090], [0.432, 84090], [0.433, 84080], [0.434, 84080], [0.435, 84080], [0.436, 84070], [0.437, 84070], [0.438, 84060], [0.439, 84060], [0.44, 84060], [0.441, 84050], [0.442, 84050], [0.443, 84040], [0.444, 84040], [0.445, 84040], [0.446, 84030], [0.447, 84030], [0.448, 84020], [0.449, 84020], [0.45, 84020], [0.451, 84010], [0.452, 84010], [0.453, 84000], [0.454, 84000], [0.455, 84000], [0.456, 83990], [0.457, 83990], [0.458, 83980], [0.459, 83980], [0.46, 83980], [0.461, 83970], [0.462, 83970], [0.463, 83960], [0.464, 83960], [0.465, 83960], [0.466, 83950], [0.467, 83950], [0.468, 83940], [0.469, 83940], [0.47, 83930], [0.471, 83930], [0.472, 83930], [0.473, 83920], [0.474, 83920], [0.475, 83910], [0.476, 83910], [0.477, 83910], [0.478, 83900], [0.479, 83900], [0.48, 83890], [0.481, 83890], [0.482, 83890], [0.483, 83880], [0.484, 83880], [0.485, 83870], [0.486, 83870], [0.487, 83870], [0.488, 83860], [0.489, 83860], [0.49, 83850], [0.491, 83850], [0.492, 83850], [0.493, 83840], [0.494, 83840], [0.495, 83830], [0.496, 83830], [0.497, 83830], [0.498, 83820], [0.499, 83820], [0.5, 83810], [0.501, 83810], [0.502, 83810], [0.503, 83800], [0.504, 83800], [0.505, 83790], [0.506, 83790], [0.507, 83780], [0.508, 83780], [0.509, 83780], [0.51, 83770], [0.511, 83770], [0.512, 83760], [0.513, 83760], [0.514, 83760], [0.515, 83750], [0.516, 83750], [0.517, 83740], [0.518, 83740], [0.519, 83740], [0.52, 83730], [0.521, 83730], [0.522, 83720], [0.523, 83720], [0.524, 83720], [0.525, 83710], [0.526, 83710], [0.527, 83700], [0.528, 83700], [0.529, 83700], [0.53, 83690], [0.531, 83690], [0.532, 83680], [0.533, 83680], [0.534, 83680], [0.535, 83670], [0.536, 83670], [0.537, 83660], [0.538, 83660], [0.539, 83660], [0.54, 83650], [0.541, 83650], [0.542, 83640], [0.543, 83640], [0.544, 83640], [0.545, 83630], [0.546, 83630], [0.547, 83620], [0.548, 83620], [0.549, 83610], [0.55, 83610], [0.551, 83610], [0.552, 83600], [0.553, 83600], [0.554, 83590], [0.555, 83590], [0.556, 83590], [0.557, 83580], [0.558, 83580], [0.559, 83570], [0.56, 83570], [0.561, 83570], [0.562, 83560], [0.563, 83560], [0.564, 83550], [0.565, 83550], [0.566, 83550], [0.567, 83540], [0.568, 83540], [0.569, 83530], [0.57, 83530], [0.571, 83530], [0.572, 83520], [0.573, 83520], [0.574, 83510], [0.575, 83510], [0.576, 83510], [0.577, 83500], [0.578, 83500], [0.579, 83490], [0.58, 83490], [0.581, 83490], [0.582, 83480], [0.583, 83480], [0.584, 83470], [0.585, 83470], [0.586, 83470], [0.587, 83460], [0.588, 83460], [0.589, 83450], [0.59, 83450], [0.591, 83440], [0.592, 83440], [0.593, 83440], [0.594, 83430], [0.595, 83430], [0.596, 83420], [0.597, 83420], [0.598, 83420], [0.599, 83410], [0.6, 83410], [0.601, 83400], [0.602, 83400], [0.603, 83400], [0.604, 83390], [0.605, 83390], [0.606, 83380], [0.607, 83380], [0.608, 83380], [0.609, 83370], [0.61, 83370], [0.611, 83360], [0.612, 83360], [0.613, 83360], [0.614, 83350], [0.615, 83350], [0.616, 83340], [0.617, 83340], [0.618, 83340], [0.619, 83330], [0.62, 83330], [0.621, 83320], [0.622, 83320], [0.623, 83320], [0.624, 83310], [0.625, 83310], [0.626, 83300], [0.627, 83300], [0.628, 83290], [0.629, 83290], [0.63, 83290], [0.631, 83280], [0.632, 83280], [0.633, 83270], [0.634, 83270], [0.635, 83270], [0.636, 83260], [0.637, 83260], [0.638, 83250], [0.639, 83250], [0.64, 83250], [0.641, 83240], [0.642, 83240], [0.643, 83230], [0.644, 83230], [0.645, 83230], [0.646, 83220], [0.647, 83220], [0.648, 83210], [0.649, 83210], [0.65, 83210], [0.651, 83200], [0.652, 83200], [0.653, 83190], [0.654, 83190], [0.655, 83190], [0.656, 83180], [0.657, 83180], [0.658, 83170], [0.659, 83170], [0.66, 83170], [0.661, 83160], [0.662, 83160], [0.663, 83150], [0.664, 83150], [0.665, 83150], [0.666, 83140], [0.667, 83140], [0.668, 83130], [0.669, 83130], [0.67, 83120], [0.671, 83120], [0.672, 83120], [0.673, 83110], [0.674, 83110], [0.675, 83100], [0.676, 83100], [0.677, 83100], [0.678, 83090], [0.679, 83090], [0.68, 83080], [0.681, 83080], [0.682, 83080], [0.683, 83070], [0.684, 83070], [0.685, 83060], [0.686, 83060], [0.687, 83060], [0.688, 83050], [0.689, 83050], [0.69, 83040], [0.691, 83040], [0.692, 83040], [0.693, 83030], [0.694, 83030], [0.695, 83020], [0.696, 83020], [0.697, 83020], [0.698, 83010], [0.699, 83010], [0.7, 83000], [0.701, 83000], [0.702, 83000], [0.703, 82990], [0.704, 82990], [0.705, 82980], [0.706, 82980], [0.707, 82970], [0.708, 82970], [0.709, 82970], [0.71, 82960], [0.711, 82960], [0.712, 82950], [0.713, 82950], [0.714, 82950], [0.715, 82940], [0.716, 82940], [0.717, 82930], [0.718, 82930], [0.719, 82930], [0.72, 82920], [0.721, 82920], [0.722, 82910], [0.723, 82910], [0.724, 82910], [0.725, 82900], [0.726, 82900], [0.727, 82890], [0.728, 82890], [0.729, 82890], [0.73, 82880], [0.731, 82880], [0.732, 82870], [0.733, 82870], [0.734, 82870], [0.735, 82860], [0.736, 82860], [0.737, 82850], [0.738, 82850], [0.739, 82850], [0.74, 82840], [0.741, 82840], [0.742, 82830], [0.743, 82830], [0.744, 82830], [0.745, 82820], [0.746, 82820], [0.747, 82810], [0.748, 82810], [0.749, 82800], [0.75, 82800], [0.751, 82800], [0.752, 82790], [0.753, 82790], [0.754, 82780], [0.755, 82780], [0.756, 82780], [0.757, 82770], [0.758, 82770], [0.759, 82760], [0.76, 82760], [0.761, 82760], [0.762, 82750], [0.763, 82750], [0.764, 82740], [0.765, 82740], [0.766, 82740], [0.767, 82730], [0.768, 82730], [0.769, 82720], [0.77, 82720], [0.771, 82720], [0.772, 82710], [0.773, 82710], [0.774, 82700], [0.775, 82700], [0.776, 82700], [0.777, 82690], [0.778, 82690], [0.779, 82680], [0.78, 82680], [0.781, 82680], [0.782, 82670], [0.783, 82670], [0.784, 82660], [0.785, 82660], [0.786, 82660], [0.787, 82650], [0.788, 82650], [0.789, 82640], [0.79, 82640], [0.791, 82630], [0.792, 82630], [0.793, 82630], [0.794, 82620], [0.795, 82620], [0.796, 82610], [0.797, 82610], [0.798, 82610], [0.799, 82600], [0.8, 82600], [0.801, 82590], [0.802, 82590], [0.803, 82590], [0.804, 82580], [0.805, 82580], [0.806, 82570], [0.807, 82570], [0.808, 82570], [0.809, 82560], [0.81, 82560], [0.811, 82550], [0.812, 82550], [0.813, 82550], [0.814, 82540], [0.815, 82540], [0.816, 82530], [0.817, 82530], [0.818, 82530], [0.819, 82520], [0.82, 82520], [0.821, 82510], [0.822, 82510], [0.823, 82510], [0.824, 82500], [0.825, 82500], [0.826, 82490], [0.827, 82490], [0.828, 82480], [0.829, 82480], [0.83, 82480], [0.831, 82470], [0.832, 82470], [0.833, 82460], [0.834, 82460], [0.835, 82460], [0.836, 82450], [0.837, 82450], [0.838, 82440], [0.839, 82440], [0.84, 82440], [0.841, 82430], [0.842, 82430], [0.843, 82420], [0.844, 82420], [0.845, 82420], [0.846, 82410], [0.847, 82410], [0.848, 82400], [0.849, 82400], [0.85, 82400], [0.851, 82390], [0.852, 82390], [0.853, 82380], [0.854, 82380], [0.855, 82380], [0.856, 82370], [0.857, 82370], [0.858, 82360], [0.859, 82360], [0.86, 82360], [0.861, 82350], [0.862, 82350], [0.863, 82340], [0.864, 82340], [0.865, 82340], [0.866, 82330], [0.867, 82330], [0.868, 82320], [0.869, 82320], [0.87, 82310], [0.871, 82310], [0.872, 82310], [0.873, 82300], [0.874, 82300], [0.875, 82290], [0.876, 82290], [0.877, 82290], [0.878, 82280], [0.879, 82280], [0.88, 82270], [0.881, 82270], [0.882, 82270], [0.883, 82260], [0.884, 82260], [0.885, 82250], [0.886, 82250], [0.887, 82250], [0.888, 82240], [0.889, 82240], [0.89, 82230], [0.891, 82230], [0.892, 82230], [0.893, 82220], [0.894, 82220], [0.895, 82210], [0.896, 82210], [0.897, 82210], [0.898, 82200], [0.899, 82200], [0.9, 82190], [0.901, 82190], [0.902, 82190], [0.903, 82180], [0.904, 82180], [0.905, 82170], [0.906, 82170], [0.907, 82160], [0.908, 82160], [0.909, 82160], [0.91, 82150], [0.911, 82150], [0.912, 82140], [0.913, 82140], [0.914, 82140], [0.915, 82130], [0.916, 82130], [0.917, 82120], [0.918, 82120], [0.919, 82120], [0.92, 82110], [0.921, 82110], [0.922, 82100], [0.923, 82100], [0.924, 82100], [0.925, 82090], [0.926, 82090], [0.927, 82080], [0.928, 82080], [0.929, 82080], [0.93, 82070], [0.931, 82070], [0.932, 82060], [0.933, 82060], [0.934, 82060], [0.935, 82050], [0.936, 82050], [0.937, 82040], [0.938, 82040], [0.939, 82040], [0.94, 82030], [0.941, 82030], [0.942, 82020], [0.943, 82020], [0.944, 82020], [0.945, 82010], [0.946, 82010], [0.947, 82000], [0.948, 82000], [0.949, 81990], [0.95, 81990], [0.951, 81990], [0.952, 81980], [0.953, 81980], [0.954, 81970], [0.955, 81970], [0.956, 81970], [0.957, 81960], [0.958, 81960], [0.959, 81950], [0.96, 81950], [0.961, 81950], [0.962, 81940], [0.963, 81940], [0.964, 81930], [0.965, 81930], [0.966, 81930], [0.967, 81920], [0.968, 81920], [0.969, 81910], [0.97, 81910], [0.971, 81910], [0.972, 81900], [0.973, 81900], [0.974, 81890], [0.975, 81890], [0.976, 81890], [0.977, 81880], [0.978, 81880], [0.979, 81870], [0.98, 81870], [0.981, 81870], [0.982, 81860], [0.983, 81860], [0.984, 81850], [0.985, 81850], [0.986, 81850], [0.987, 81840], [0.988, 81840], [0.989, 81830], [0.99, 81830], [0.991, 81820], [0.992, 81820], [0.993, 81820], [0.994, 81810], [0.995, 81810], [0.996, 81800], [0.997, 81800], [0.998, 81800], [0.999, 81790]]
        self.ans = L

        return True

    def sim_eff10_stored_2020_04_08(self):
        """
        Store value from simulation of normal battery with 10 % efficient solar panel.
        """
        L = [[0.0, 2163000], [0.001, 2133920], [0.002, 2104840], [0.003, 2075760], [0.004, 2046680], [0.005, 2017600], [0.006, 1988520], [0.007, 1959440], [0.008, 1930360], [0.009, 1901280], [0.01, 1872200], [0.011, 1843120], [0.012, 1814040], [0.013, 1784950], [0.014, 1755870], [0.015, 1726790], [0.016, 1697710], [0.017, 1668630], [0.018, 1639550], [0.019, 1610470], [0.02, 1581390], [0.021, 1552310], [0.022, 1523230], [0.023, 1494150], [0.024, 1465070], [0.025, 1435980], [0.026, 1406900], [0.027, 1377820], [0.028, 1348740], [0.029, 1319660], [0.03, 1290580], [0.031, 1261500], [0.032, 1232420], [0.033, 1203340], [0.034, 1174260], [0.035, 1145180], [0.036, 1116100], [0.037, 1087020], [0.038, 1057930], [0.039, 1028850], [0.04, 999770], [0.041, 970690], [0.042, 941610], [0.043, 912530], [0.044, 883450], [0.045, 854370], [0.046, 825290], [0.047, 796210], [0.048, 767130], [0.049, 738050], [0.05, 711430], [0.051, 686170], [0.052, 660920], [0.053, 635660], [0.054, 610410], [0.055, 585150], [0.056, 559900], [0.057, 534640], [0.058, 509390], [0.059, 484130], [0.06, 458880], [0.061, 433620], [0.062, 408370], [0.063, 383110], [0.064, 357860], [0.065, 332600], [0.066, 307350], [0.067, 282090], [0.068, 256840], [0.069, 231580], [0.07, 206330], [0.071, 181070], [0.072, 155820], [0.073, 130560], [0.074, 105410], [0.075, 95870], [0.076, 95780], [0.077, 95680], [0.078, 95590], [0.079, 95490], [0.08, 95400], [0.081, 95300], [0.082, 95210], [0.083, 95110], [0.084, 95020], [0.085, 94920], [0.086, 94830], [0.087, 94730], [0.088, 94640], [0.089, 94540], [0.09, 94450], [0.091, 94350], [0.092, 94260], [0.093, 94160], [0.094, 94070], [0.095, 93970], [0.096, 93880], [0.097, 93780], [0.098, 93690], [0.099, 93590], [0.1, 93490], [0.101, 93400], [0.102, 93300], [0.103, 93210], [0.104, 93110], [0.105, 93020], [0.106, 92920], [0.107, 92830], [0.108, 92730], [0.109, 92640], [0.11, 92540], [0.111, 92450], [0.112, 92350], [0.113, 92260], [0.114, 92160], [0.115, 92070], [0.116, 91970], [0.117, 91880], [0.118, 91780], [0.119, 91690], [0.12, 91590], [0.121, 91500], [0.122, 91400], [0.123, 91310], [0.124, 91210], [0.125, 91120], [0.126, 91020], [0.127, 90930], [0.128, 90830], [0.129, 90740], [0.13, 90640], [0.131, 90550], [0.132, 90450], [0.133, 90360], [0.134, 90260], [0.135, 90170], [0.136, 90070], [0.137, 89980], [0.138, 89880], [0.139, 89790], [0.14, 89690], [0.141, 89600], [0.142, 89500], [0.143, 89410], [0.144, 89310], [0.145, 89220], [0.146, 89120], [0.147, 89030], [0.148, 88930], [0.149, 88840], [0.15, 88740], [0.151, 88640], [0.152, 88550], [0.153, 88450], [0.154, 88360], [0.155, 88260], [0.156, 88170], [0.157, 88070], [0.158, 87980], [0.159, 87880], [0.16, 87790], [0.161, 87690], [0.162, 87600], [0.163, 87500], [0.164, 87410], [0.165, 87310], [0.166, 87220], [0.167, 87120], [0.168, 87030], [0.169, 86930], [0.17, 86840], [0.171, 86740], [0.172, 86650], [0.173, 86550], [0.174, 86460], [0.175, 86360], [0.176, 86270], [0.177, 86170], [0.178, 86080], [0.179, 85980], [0.18, 85890], [0.181, 85790], [0.182, 85700], [0.183, 85600], [0.184, 85510], [0.185, 85410], [0.186, 85340], [0.187, 85330], [0.188, 85330], [0.189, 85330], [0.19, 85330], [0.191, 85320], [0.192, 85320], [0.193, 85320], [0.194, 85310], [0.195, 85310], [0.196, 85310], [0.197, 85310], [0.198, 85300], [0.199, 85300], [0.2, 85300], [0.201, 85300], [0.202, 85290], [0.203, 85290], [0.204, 85290], [0.205, 85280], [0.206, 85280], [0.207, 85280], [0.208, 85280], [0.209, 85270], [0.21, 85270], [0.211, 85270], [0.212, 85270], [0.213, 85260], [0.214, 85260], [0.215, 85260], [0.216, 85260], [0.217, 85250], [0.218, 85250], [0.219, 85250], [0.22, 85240], [0.221, 85240], [0.222, 85240], [0.223, 85240], [0.224, 85230], [0.225, 85230], [0.226, 85230], [0.227, 85230], [0.228, 85220], [0.229, 85220], [0.23, 85220], [0.231, 85210], [0.232, 85210], [0.233, 85210], [0.234, 85210], [0.235, 85200], [0.236, 85200], [0.237, 85200], [0.238, 85200], [0.239, 85190], [0.24, 85190], [0.241, 85190], [0.242, 85180], [0.243, 85180], [0.244, 85180], [0.245, 85180], [0.246, 85170], [0.247, 85170], [0.248, 85170], [0.249, 85170], [0.25, 85160], [0.251, 85160], [0.252, 85160], [0.253, 85160], [0.254, 85150], [0.255, 85150], [0.256, 85150], [0.257, 85140], [0.258, 85140], [0.259, 85140], [0.26, 85140], [0.261, 85130], [0.262, 85130], [0.263, 85130], [0.264, 85130], [0.265, 85120], [0.266, 85120], [0.267, 85120], [0.268, 85110], [0.269, 85110], [0.27, 85110], [0.271, 85110], [0.272, 85100], [0.273, 85100], [0.274, 85100], [0.275, 85100], [0.276, 85090], [0.277, 85090], [0.278, 85090], [0.279, 85090], [0.28, 85080], [0.281, 85080], [0.282, 85080], [0.283, 85070], [0.284, 85070], [0.285, 85070], [0.286, 85070], [0.287, 85060], [0.288, 85060], [0.289, 85060], [0.29, 85060], [0.291, 85050], [0.292, 85050], [0.293, 85050], [0.294, 85040], [0.295, 85040], [0.296, 85040], [0.297, 85040], [0.298, 85030], [0.299, 85030], [0.3, 85030], [0.301, 85030], [0.302, 85020], [0.303, 85020], [0.304, 85020], [0.305, 85010], [0.306, 85010], [0.307, 85010], [0.308, 85010], [0.309, 85000], [0.31, 85000], [0.311, 85000], [0.312, 85000], [0.313, 84990], [0.314, 84990], [0.315, 84990], [0.316, 84990], [0.317, 84980], [0.318, 84980], [0.319, 84980], [0.32, 84970], [0.321, 84970], [0.322, 84970], [0.323, 84970], [0.324, 84960], [0.325, 84960], [0.326, 84960], [0.327, 84960], [0.328, 84950], [0.329, 84950], [0.33, 84950], [0.331, 84940], [0.332, 84940], [0.333, 84940], [0.334, 84940], [0.335, 84930], [0.336, 84930], [0.337, 84930], [0.338, 84930], [0.339, 84920], [0.34, 84920], [0.341, 84920], [0.342, 84910], [0.343, 84910], [0.344, 84910], [0.345, 84910], [0.346, 84900], [0.347, 84900], [0.348, 84900], [0.349, 84900], [0.35, 84890], [0.351, 84890], [0.352, 84890], [0.353, 84890], [0.354, 84880], [0.355, 84880], [0.356, 84880], [0.357, 84870], [0.358, 84870], [0.359, 84870], [0.36, 84870], [0.361, 84860], [0.362, 84860], [0.363, 84860], [0.364, 84860], [0.365, 84850], [0.366, 84850], [0.367, 84850], [0.368, 84840], [0.369, 84840], [0.37, 84840], [0.371, 84840], [0.372, 84830], [0.373, 84830], [0.374, 84830], [0.375, 84830], [0.376, 84820], [0.377, 84820], [0.378, 84820], [0.379, 84820], [0.38, 84810], [0.381, 84810], [0.382, 84810], [0.383, 84800], [0.384, 84800], [0.385, 84800], [0.386, 84800], [0.387, 84790], [0.388, 84790], [0.389, 84790], [0.39, 84790], [0.391, 84780], [0.392, 84780], [0.393, 84780], [0.394, 84770], [0.395, 84770], [0.396, 84770], [0.397, 84770], [0.398, 84760], [0.399, 84760], [0.4, 84760], [0.401, 84760], [0.402, 84750], [0.403, 84750], [0.404, 84750], [0.405, 84740], [0.406, 84740], [0.407, 84740], [0.408, 84740], [0.409, 84730], [0.41, 84730], [0.411, 84730], [0.412, 84730], [0.413, 84720], [0.414, 84720], [0.415, 84720], [0.416, 84720], [0.417, 84710], [0.418, 84710], [0.419, 84710], [0.42, 84700], [0.421, 84700], [0.422, 84700], [0.423, 84700], [0.424, 84690], [0.425, 84690], [0.426, 84690], [0.427, 84690], [0.428, 84680], [0.429, 84680], [0.43, 84680], [0.431, 84670], [0.432, 84670], [0.433, 84670], [0.434, 84670], [0.435, 84660], [0.436, 84660], [0.437, 84660], [0.438, 84660], [0.439, 84650], [0.44, 84650], [0.441, 84650], [0.442, 84640], [0.443, 84640], [0.444, 84640], [0.445, 84640], [0.446, 84630], [0.447, 84630], [0.448, 84630], [0.449, 84630], [0.45, 84620], [0.451, 84620], [0.452, 84620], [0.453, 84620], [0.454, 84610], [0.455, 84610], [0.456, 84610], [0.457, 84600], [0.458, 84600], [0.459, 84600], [0.46, 84600], [0.461, 84590], [0.462, 84590], [0.463, 84590], [0.464, 84590], [0.465, 84580], [0.466, 84580], [0.467, 84580], [0.468, 84570], [0.469, 84570], [0.47, 84570], [0.471, 84570], [0.472, 84560], [0.473, 84560], [0.474, 84560], [0.475, 84560], [0.476, 84550], [0.477, 84550], [0.478, 84550], [0.479, 84550], [0.48, 84540], [0.481, 84540], [0.482, 84540], [0.483, 84530], [0.484, 84530], [0.485, 84530], [0.486, 84530], [0.487, 84520], [0.488, 84520], [0.489, 84520], [0.49, 84520], [0.491, 84510], [0.492, 84510], [0.493, 84510], [0.494, 84500], [0.495, 84500], [0.496, 84500], [0.497, 84500], [0.498, 84490], [0.499, 84490], [0.5, 84490], [0.501, 84490], [0.502, 84480], [0.503, 84480], [0.504, 84480], [0.505, 84470], [0.506, 84470], [0.507, 84470], [0.508, 84470], [0.509, 84460], [0.51, 84460], [0.511, 84460], [0.512, 84460], [0.513, 84450], [0.514, 84450], [0.515, 84450], [0.516, 84450], [0.517, 84440], [0.518, 84440], [0.519, 84440], [0.52, 84430], [0.521, 84430], [0.522, 84430], [0.523, 84430], [0.524, 84420], [0.525, 84420], [0.526, 84420], [0.527, 84420], [0.528, 84410], [0.529, 84410], [0.53, 84410], [0.531, 84400], [0.532, 84400], [0.533, 84400], [0.534, 84400], [0.535, 84390], [0.536, 84390], [0.537, 84390], [0.538, 84390], [0.539, 84380], [0.54, 84380], [0.541, 84380], [0.542, 84370], [0.543, 84370], [0.544, 84370], [0.545, 84370], [0.546, 84360], [0.547, 84360], [0.548, 84360], [0.549, 84360], [0.55, 84350], [0.551, 84350], [0.552, 84350], [0.553, 84350], [0.554, 84340], [0.555, 84340], [0.556, 84340], [0.557, 84330], [0.558, 84330], [0.559, 84330], [0.56, 84330], [0.561, 84320], [0.562, 84320], [0.563, 84320], [0.564, 84320], [0.565, 84310], [0.566, 84310], [0.567, 84310], [0.568, 84300], [0.569, 84300], [0.57, 84300], [0.571, 84300], [0.572, 84290], [0.573, 84290], [0.574, 84290], [0.575, 84290], [0.576, 84280], [0.577, 84280], [0.578, 84280], [0.579, 84280], [0.58, 84270], [0.581, 84270], [0.582, 84270], [0.583, 84260], [0.584, 84260], [0.585, 84260], [0.586, 84260], [0.587, 84250], [0.588, 84250], [0.589, 84250], [0.59, 84250], [0.591, 84240], [0.592, 84240], [0.593, 84240], [0.594, 84230], [0.595, 84230], [0.596, 84230], [0.597, 84230], [0.598, 84220], [0.599, 84220], [0.6, 84220], [0.601, 84220], [0.602, 84210], [0.603, 84210], [0.604, 84210], [0.605, 84200], [0.606, 84200], [0.607, 84200], [0.608, 84200], [0.609, 84190], [0.61, 84190], [0.611, 84190], [0.612, 84190], [0.613, 84180], [0.614, 84180], [0.615, 84180], [0.616, 84180], [0.617, 84170], [0.618, 84170], [0.619, 84170], [0.62, 84160], [0.621, 84160], [0.622, 84160], [0.623, 84160], [0.624, 84150], [0.625, 84150], [0.626, 84150], [0.627, 84150], [0.628, 84140], [0.629, 84140], [0.63, 84140], [0.631, 84130], [0.632, 84130], [0.633, 84130], [0.634, 84130], [0.635, 84120], [0.636, 84120], [0.637, 84120], [0.638, 84120], [0.639, 84110], [0.64, 84110], [0.641, 84110], [0.642, 84100], [0.643, 84100], [0.644, 84100], [0.645, 84100], [0.646, 84090], [0.647, 84090], [0.648, 84090], [0.649, 84090], [0.65, 84080], [0.651, 84080], [0.652, 84080], [0.653, 84080], [0.654, 84070], [0.655, 84070], [0.656, 84070], [0.657, 84060], [0.658, 84060], [0.659, 84060], [0.66, 84060], [0.661, 84050], [0.662, 84050], [0.663, 84050], [0.664, 84050], [0.665, 84040], [0.666, 84040], [0.667, 84040], [0.668, 84030], [0.669, 84030], [0.67, 84030], [0.671, 84030], [0.672, 84020], [0.673, 84020], [0.674, 84020], [0.675, 84020], [0.676, 84010], [0.677, 84010], [0.678, 84010], [0.679, 84010], [0.68, 84000], [0.681, 84000], [0.682, 84000], [0.683, 83990], [0.684, 83990], [0.685, 83990], [0.686, 83990], [0.687, 83980], [0.688, 83980], [0.689, 83980], [0.69, 83980], [0.691, 83970], [0.692, 83970], [0.693, 83970], [0.694, 83960], [0.695, 83960], [0.696, 83960], [0.697, 83960], [0.698, 83950], [0.699, 83950], [0.7, 83950], [0.701, 83950], [0.702, 83940], [0.703, 83940], [0.704, 83940], [0.705, 83930], [0.706, 83930], [0.707, 83930], [0.708, 83930], [0.709, 83920], [0.71, 83920], [0.711, 83920], [0.712, 83920], [0.713, 83910], [0.714, 83910], [0.715, 83910], [0.716, 83910], [0.717, 83900], [0.718, 83900], [0.719, 83900], [0.72, 83890], [0.721, 83890], [0.722, 83890], [0.723, 83890], [0.724, 83880], [0.725, 83880], [0.726, 83880], [0.727, 83880], [0.728, 83870], [0.729, 83870], [0.73, 83870], [0.731, 83860], [0.732, 83860], [0.733, 83860], [0.734, 83860], [0.735, 83850], [0.736, 83850], [0.737, 83850], [0.738, 83850], [0.739, 83840], [0.74, 83840], [0.741, 83840], [0.742, 83830], [0.743, 83830], [0.744, 83830], [0.745, 83830], [0.746, 83820], [0.747, 83820], [0.748, 83820], [0.749, 83820], [0.75, 83810], [0.751, 83810], [0.752, 83810], [0.753, 83810], [0.754, 83800], [0.755, 83800], [0.756, 83800], [0.757, 83790], [0.758, 83790], [0.759, 83790], [0.76, 83790], [0.761, 83780], [0.762, 83780], [0.763, 83780], [0.764, 83780], [0.765, 83770], [0.766, 83770], [0.767, 83770], [0.768, 83760], [0.769, 83760], [0.77, 83760], [0.771, 83760], [0.772, 83750], [0.773, 83750], [0.774, 83750], [0.775, 83750], [0.776, 83740], [0.777, 83740], [0.778, 83740], [0.779, 83740], [0.78, 83730], [0.781, 83730], [0.782, 83730], [0.783, 83720], [0.784, 83720], [0.785, 83720], [0.786, 83720], [0.787, 83710], [0.788, 83710], [0.789, 83710], [0.79, 83710], [0.791, 83700], [0.792, 83700], [0.793, 83700], [0.794, 83690], [0.795, 83690], [0.796, 83690], [0.797, 83690], [0.798, 83680], [0.799, 83680], [0.8, 83680], [0.801, 83680], [0.802, 83670], [0.803, 83670], [0.804, 83670], [0.805, 83660], [0.806, 83660], [0.807, 83660], [0.808, 83660], [0.809, 83650], [0.81, 83650], [0.811, 83650], [0.812, 83650], [0.813, 83640], [0.814, 83640], [0.815, 83640], [0.816, 83640], [0.817, 83630], [0.818, 83630], [0.819, 83630], [0.82, 83620], [0.821, 83620], [0.822, 83620], [0.823, 83620], [0.824, 83610], [0.825, 83610], [0.826, 83610], [0.827, 83610], [0.828, 83600], [0.829, 83600], [0.83, 83600], [0.831, 83590], [0.832, 83590], [0.833, 83590], [0.834, 83590], [0.835, 83580], [0.836, 83580], [0.837, 83580], [0.838, 83580], [0.839, 83570], [0.84, 83570], [0.841, 83570], [0.842, 83560], [0.843, 83560], [0.844, 83560], [0.845, 83560], [0.846, 83550], [0.847, 83550], [0.848, 83550], [0.849, 83550], [0.85, 83540], [0.851, 83540], [0.852, 83540], [0.853, 83540], [0.854, 83530], [0.855, 83530], [0.856, 83530], [0.857, 83520], [0.858, 83520], [0.859, 83520], [0.86, 83520], [0.861, 83510], [0.862, 83510], [0.863, 83510], [0.864, 83510], [0.865, 83500], [0.866, 83500], [0.867, 83500], [0.868, 83490], [0.869, 83490], [0.87, 83490], [0.871, 83490], [0.872, 83480], [0.873, 83480], [0.874, 83480], [0.875, 83480], [0.876, 83470], [0.877, 83470], [0.878, 83470], [0.879, 83470], [0.88, 83460], [0.881, 83460], [0.882, 83460], [0.883, 83450], [0.884, 83450], [0.885, 83450], [0.886, 83450], [0.887, 83440], [0.888, 83440], [0.889, 83440], [0.89, 83440], [0.891, 83430], [0.892, 83430], [0.893, 83430], [0.894, 83420], [0.895, 83420], [0.896, 83420], [0.897, 83420], [0.898, 83410], [0.899, 83410], [0.9, 83410], [0.901, 83410], [0.902, 83400], [0.903, 83400], [0.904, 83400], [0.905, 83390], [0.906, 83390], [0.907, 83390], [0.908, 83390], [0.909, 83380], [0.91, 83380], [0.911, 83380], [0.912, 83380], [0.913, 83370], [0.914, 83370], [0.915, 83370], [0.916, 83370], [0.917, 83360], [0.918, 83360], [0.919, 83360], [0.92, 83350], [0.921, 83350], [0.922, 83350], [0.923, 83350], [0.924, 83340], [0.925, 83340], [0.926, 83340], [0.927, 83340], [0.928, 83330], [0.929, 83330], [0.93, 83330], [0.931, 83320], [0.932, 83320], [0.933, 83320], [0.934, 83320], [0.935, 83310], [0.936, 83310], [0.937, 83310], [0.938, 83310], [0.939, 83300], [0.94, 83300], [0.941, 83300], [0.942, 83290], [0.943, 83290], [0.944, 83290], [0.945, 83290], [0.946, 83280], [0.947, 83280], [0.948, 83280], [0.949, 83280], [0.95, 83270], [0.951, 83270], [0.952, 83270], [0.953, 83270], [0.954, 83260], [0.955, 83260], [0.956, 83260], [0.957, 83250], [0.958, 83250], [0.959, 83250], [0.96, 83250], [0.961, 83240], [0.962, 83240], [0.963, 83240], [0.964, 83240], [0.965, 83230], [0.966, 83230], [0.967, 83230], [0.968, 83220], [0.969, 83220], [0.97, 83220], [0.971, 83220], [0.972, 83210], [0.973, 83210], [0.974, 83210], [0.975, 83210], [0.976, 83200], [0.977, 83200], [0.978, 83200], [0.979, 83200], [0.98, 83190], [0.981, 83190], [0.982, 83190], [0.983, 83180], [0.984, 83180], [0.985, 83180], [0.986, 83180], [0.987, 83170], [0.988, 83170], [0.989, 83170], [0.99, 83170], [0.991, 83160], [0.992, 83160], [0.993, 83160], [0.994, 83150], [0.995, 83150], [0.996, 83150], [0.997, 83150], [0.998, 83140], [0.999, 83140]]
        self.ans = L
        return True
    
    def find_min_cap(self,lower=0,upper=0.1,steps=1000,show=False):
        N = steps # Number of steps
        h = lower # Lower bound
        k = upper # Upper bound
        

        self.ans = [] # Reset self.ans


        
        for i in range(0,N,1): # Check areas (0,N)
            area = h + i*k/N

            if i == 0:
                if area == 0 and self.ERG == 5150: 
                    capacity = self.max_cap
                else:
                    capacity = math.floor(1/self.INIT*(4*self.ERG)/10)*10  # Minimum capacity (0.5 -> 0 in one day): floor(2*(4*ERG), -1)
                    
                while self.check_cap(area, capacity) == False:
                    capacity += 10

                    if capacity > self.max_cap: 
                        print('ERROR: Exceeded bounds... somebody\'s math is wrong!')
                        break
            else:
                capacity = ans[1] # Take previous capacity

                while self.check_cap(area, capacity) == True:
                    capacity -= 10

                    if capacity < self.min_cap: 
                        print('ERROR: Something actually went wrong!')
                        break

                capacity += 10 # Add 10 back to capacity, to make it work again   

            ans = [area, capacity]
            if show == True:
                print('Area and Capacity:', ans)
            
            self.ans += [ans]

        if show == True:
            print('Capacity as a function of Area: ',self.ans)
    
        return True

    def check_cap(self, area, capacity, min_charge=0.2):

        battery = self.INIT * capacity

        collect = [] # Function of how much sun it gets (in J)
        for i in self.COLLECT:
            collect += [area * i]

        for day in range(0,self.DAYS,1):
            for t in range(0,len(collect),1):
                if t % 8 == 0 or (t%4==0 and t>23 and t<75):
                    battery -= self.ERG # Use battery

                    if battery < min_charge * capacity: # Check if battery is out of charge
                        return False
                    
                battery += collect[t]
                if battery > capacity:
                    battery = capacity

        # If it passes the filter, return True
        return True
        
    def plot_min_cap_by_area_curve(self,show=False,erg_unit='Wh'):
        

        area = []
        capacity = []
        max_cap = []
        min_cap = []
        
        for i in range(0,len(self.ans),1):
            area += [self.ans[i][0]]
            capacity += [self.convert(self.ans[i][1],'J',erg_unit)]

            max_cap += [1854000] #3.3*(4*self.ERG)
            min_cap += [420 * self.ERG]

        if show == True:
            print('Minimum capacity [J] as a function of Area:', self.ans)
            print('Energy unit:', erg_unit)
            print('Minimum capacity ['+erg_unit+'] as a function of Area:', capacity)

        plt.plot(area,capacity, label='Minimum Battery size for Given Area')
        plt.xlabel('Area [m^2]')
        plt.ylabel('Size of Battery ['+erg_unit+']')
        plt.title('Minimum Battery size for a given Area Curve')
        plt.legend()
        plt.show()
        
        return True




    ##### PART III & IV: Simulate Area and Capacities #####

    def simulate_dimensions(self, area, capacity, num_days=1, erg_unit='J', show=False, plot_upper=True, plot_lower=False):
        sim_battery = []
        sim_collect = []

        # Initiate battery levels
        battery = self.INIT * capacity
        
        collect = [] # Function of how much sun it gets
        for i in self.COLLECT:
            collect += [area * i]

        # Show values it will plot
        if show == True:
            print('Area:', area, '\n')
            print('COLLECT [J/15 min/m^2]:', self.COLLECT, '\nSum of COLLECT:', sum(self.COLLECT), '\n')
            print('collect [J/15 min]:',collect, '\nSum of collect:', sum(collect),'\n')

        for day in range(0, num_days, 1):
            
            for t in range(0,len(collect),1):

                sim_battery += [battery]
                sim_collect += [collect[t]] # WAS: [self.TIME * area * collect[t]]. Incorrect?

                
                if t % 8 == 0 or (t%4==0 and t>23 and t<75):
                    battery -= self.ERG # Use battery

                    if show == True:
                        if battery < 0.2 * capacity and battery > 0: # Check if battery is out of charge
                            print('WARNING: BATTERY LOW')
                        elif battery <= 0:
                            print('ERROR: BATTERY DEAD')
                    
                battery += collect[t]
                if battery > capacity:
                    battery = capacity

        # Plotting it out
        time = []
        title = str(num_days) + ' Day Simulation of '+str(area)+ ' m^2 Solar Panel \n and \n '+str(round(self.convert(capacity,'J',erg_unit),2))+' '+erg_unit+' battery'
        for i in range(0,num_days*len(collect),1):
            time += [i*0.25]

        plt.plot(time,sim_battery, 'b', label='Battery Charge')
        plt.plot(time, sim_collect, 'xkcd:orange', label='Solar Energy Collected in 15 minutes')

        if plot_upper == True:
            upper = []
            for i in range(len(time)):
                upper += [capacity]

            plt.plot(time, upper, 'g--', label='Maximum Capacity of Battery')

        if plot_lower == True:
            lower = []
            for i in range(len(time)):
                lower += [0.2 * capacity]

            plt.plot(time, lower, 'r--', label='Minimum Allowable Battery Charge')
        
        plt.xlabel('Time [h]')
        plt.ylabel('Energy ['+erg_unit+']')
        plt.title(title)
        plt.legend(loc='upper left')
        plt.show()

        return True






    ##### PART IV: Optimization for Cost #####
    
    def best_cost(self,show=False):

        price = []
        area = []

        for i in range(0,len(self.ans),1):
            price += [self.cost(self.ans[i][0],self.ans[i][1])]
            area += [self.ans[i][0]]

        min_price = price[0]
        min_index = 0
        
        for i in range(0,len(price),1):
            if price[i] < min_price:
                min_price = price[i]
                min_index = i

        plt.plot(area, price)
        plt.title('Price of the System by Area of Solar Panel')
        plt.xlabel('Area [m^2]')
        plt.ylabel('Price [$ USD]')
        plt.show()
        
        if show == True:
            print('The minimum price is:', price[min_index],'at index',min_index)
            print('The dimensions are: AREA =', self.ans[min_index][0], 'BATTERY =',self.ans[min_index][1])
        return min_index

    def optimal_dimensions(self):
        min_index = self.best_cost(False)
        return self.ans[min_index]
            

        
          

def main():
    x = solar_power()
    """
    # Part 2.1
    print('\n\n\t\t>>> PART 2.1 <<<\n\n')
    x.daily_sun(show=True)
    x.min_area()
    print('Cost of 0.05 m^2 solar panel is $', x.cost(area=0.05,capacity=0), 'USD')
    """

    """
    # Part 2.2
    print('\n\n\t\t>>> PART 2.2 <<<\n\n')
    print('Cost of a 27.78 Wh (100000 J) Li-battery is $', x.cost(area=0,capacity=100000),'USD')
    """

    """
    # Part 2.3
    print('\n\n\t\t>>> PART 2.3 <<<\n\n')
    x.simulate_dimensions(area=0.05,capacity=100000,num_days=1,erg_unit='Wh',show=False,plot_upper=True,plot_lower=False)
    print('Cost of 0.05 m^2 solar panel and 27.78 Wh (100000 J) Li-battery is $', x.cost(area=0.05,capacity=100000),'USD')
    """

    """
    # Part 2.4
    print('\n\n\t\t>>> PART 2.4 <<<\n\n')
    #x.find_min_cap(lower=0,upper=1,steps=1000, show=True) # Computes the values from scratch, but it is slow
    #x.sim_stored_2020_04_08() # This is faster, since I already computed the values
    x.sim_eff10_stored_2020_04_08() # This is faster, since I already computed the values
    x.plot_min_cap_by_area_curve(show=False,erg_unit='Wh')
    
    r = x.optimal_dimensions()
    x.simulate_dimensions(r[0],r[1],7,'Wh',True,True,True)
    target_unit = 'Wh'
    print('Cost of',r[0], 'm^2 of solar panelling and',x.convert(r[1],'J',target_unit),target_unit,'of battery capacity: $',x.cost(r[0],r[1]),'USD')
    """

    #"""
    # Discussion
    print('\n\n\t\t>>> DISCUSSION <<<\n\n')
    print('New cost for 7 % efficient solar panels and only 0.8 of a useable battery: $', x.cost(0.11,x.convert(33.29,'Wh','J')),'USD')
    #"""
    
    return True

main()
